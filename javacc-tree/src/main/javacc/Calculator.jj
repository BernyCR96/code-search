options{  JDK_VERSION = "1.5";  STATIC = false;}PARSER_BEGIN(Calculator)package com.test.parser;public class Calculator{}PARSER_END(Calculator)SKIP:{  " "  | "\t"  | "\n"  | "\r"}TOKEN:{  <ADD:("+")>  | <SUB:("-")>  | <MUL:("*")>  | <DIV:("/")>  | <LBR:("(")>  | <RBR:(")")>  | <INT:(["0"-"9"])+>}TreeNode start():{  TreeNode node = null;}{  node = expr(){    return node;  }}TreeNode expr():{  TreeNode node;  TreeNode tmp;}{  node = term()((<ADD>{    tmp = node;    node = new AddNode();    node.setLeft(tmp);  }  | <SUB>{    tmp = node;    node = new SubNode();    node.setLeft(tmp);  }  )tmp = term(){    node.setRight(tmp);  }  )*{    return node;  }}TreeNode term():{  TreeNode node;  TreeNode tmp;}{  node = factor()((<MUL>{    tmp = node;    node = new MulNode();    node.setLeft(tmp);  }  | <DIV>{    tmp = node;    node = new DivNode();    node.setLeft(tmp);  }  )tmp = factor(){    node.setRight(tmp);  }  )*{    return node;  }}TreeNode factor():{  Token t;  TreeNode node;}{  (t = <INT>{    node = new IntLeaf();    ((IntLeaf)node).setValue(Integer.parseInt(t.image));  }  | <LBR>node = expr()<RBR>){    return node;  }}